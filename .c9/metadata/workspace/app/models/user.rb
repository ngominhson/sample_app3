{"changed":true,"filter":false,"title":"user.rb","tooltip":"/app/models/user.rb","value":"class User < ActiveRecord::Base\n  has_many :microposts, dependent: :destroy\n  has_many :active_relationships, class_name:  \"Relationship\",\n                                  foreign_key: \"follower_id\",\n                                  dependent:   :destroy\n  has_many :passive_relationships, class_name:  \"Relationship\",\n                                   foreign_key: \"followed_id\",\n                                   dependent:   :destroy\n  has_many :following, through: :active_relationships,  source: :followed\n  has_many :followers, through: :passive_relationships, source: :follower\n  default_scope -> { order(created_at: :desc) }\n  attr_accessor :remember_token, :activation_token, :reset_token\n  before_save   :downcase_email\n  before_create :create_activation_digest\n  validates :name, presence: true, length: { maximum: 50 }\n  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-]+(\\.[a-z\\d\\-]+)*\\.[a-z]+\\z/i\n  validates :email, presence:   true,\n                    format:     { with: VALID_EMAIL_REGEX },\n                    uniqueness: { case_sensitive: false }\n  has_secure_password\n  validates :password, length: { minimum: 6 }, allow_blank: true\n\n  # Returns the hash digest of the given string.\n  def User.digest(string)\n    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :\n                                                  BCrypt::Engine.cost\n    BCrypt::Password.create(string, cost: cost)\n  end\n\n  # Returns a random token.\n  def User.new_token\n    SecureRandom.urlsafe_base64\n  end\n\n  # Remembers a user in the database for use in persistent sessions.\n  def remember\n    self.remember_token = User.new_token\n    update_attribute(:remember_digest, User.digest(remember_token))\n  end\n\n   # Returns true if the given token matches the digest.\n  def authenticated?(attribute, token)\n    digest = send(\"#{attribute}_digest\")\n    return false if digest.nil?\n    BCrypt::Password.new(digest).is_password?(token)\n  end\n\n  # Forgets a user.\n  def forget\n    update_attribute(:remember_digest, nil)\n  end\n  \n  def downcase_email\n    self.email = email.downcase\n  end\n  \n  # Creates and assigns the activation token and digest.\n  def create_activation_digest\n    self.activation_token  = User.new_token\n    self.activation_digest = User.digest(activation_token)\n  end\n  \n  # Activates an account.\n  def activate\n    update_columns(activated: FILL_IN, activated_at: FILL_IN)\n  end\n  \n  def send_activation_email\n    UserMailer.account_activation(self).deliver_now\n  end\n  \n  def create_reset_digest\n    self.reset_token = User.new_token\n    update_columns(reset_digest:  FILL_IN,\n                   reset_sent_at: FILL_IN)\n  end\n  \n  def send_password_reset_email\n    UserMailer.password_reset(self).deliver_now\n  end\n  \n  def password_reset_expired?\n    reset_sent_at < 2.hours.ago\n  end\n\n\n  # Defines a proto-feed.\n  # See \"Following users\" for the full implementation.\n  def feed\n    following_ids = \"SELECT followed_id FROM relationships\n                     WHERE  follower_id = :user_id\"\n    Micropost.where(\"user_id IN (#{following_ids})\n                     OR user_id = :user_id\", user_id: id)\n  end\n\n  # Follows a user.\n  def follow(other_user)\n    active_relationships.create(followed_id: other_user.id)\n  end\n\n  # Unfollows a user.\n  def unfollow(other_user)\n    active_relationships.find_by(followed_id: other_user.id).destroy\n  end\n\n  # Returns true if the current user is following the other user.\n  def following?(other_user)\n    following.include?(other_user)\n  end\n  \n  private\n\n    # Converts email to all lower-case.\n    def downcase_email\n      self.email = email.downcase\n    end\n\n    # Creates and assigns the activation token and digest.\n    def create_activation_digest\n      self.activation_token  = User.new_token\n      self.activation_digest = User.digest(activation_token)\n    end\n  \nend","undoManager":{"mark":48,"position":56,"stack":[[{"group":"doc","deltas":[{"start":{"row":1,"column":2},"end":{"row":2,"column":33},"action":"remove","lines":["attr_accessor :remember_token","  before_save { email.downcase! }"]},{"start":{"row":1,"column":2},"end":{"row":3,"column":41},"action":"insert","lines":["attr_accessor :remember_token, :activation_token","  before_save   :downcase_email","  before_create :create_activation_digest"]}]}],[{"group":"doc","deltas":[{"start":{"row":39,"column":5},"end":{"row":40,"column":0},"action":"insert","lines":["",""]},{"start":{"row":40,"column":0},"end":{"row":40,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":40,"column":2},"end":{"row":41,"column":0},"action":"insert","lines":["",""]},{"start":{"row":41,"column":0},"end":{"row":41,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":41,"column":2},"end":{"row":43,"column":7},"action":"insert","lines":["def downcase_email","      self.email = email.downcase","    end"]}]}],[{"group":"doc","deltas":[{"start":{"row":43,"column":2},"end":{"row":43,"column":4},"action":"remove","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":42,"column":4},"end":{"row":42,"column":6},"action":"remove","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":43,"column":5},"end":{"row":44,"column":0},"action":"insert","lines":["",""]},{"start":{"row":44,"column":0},"end":{"row":44,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":44,"column":2},"end":{"row":45,"column":0},"action":"insert","lines":["",""]},{"start":{"row":45,"column":0},"end":{"row":45,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":45,"column":2},"end":{"row":49,"column":7},"action":"insert","lines":["# Creates and assigns the activation token and digest.","    def create_activation_digest","      self.activation_token  = User.new_token","      self.activation_digest = User.digest(activation_token)","    end"]}]}],[{"group":"doc","deltas":[{"start":{"row":46,"column":0},"end":{"row":46,"column":2},"action":"remove","lines":["  "]},{"start":{"row":47,"column":0},"end":{"row":47,"column":2},"action":"remove","lines":["  "]},{"start":{"row":48,"column":0},"end":{"row":48,"column":2},"action":"remove","lines":["  "]},{"start":{"row":49,"column":0},"end":{"row":49,"column":2},"action":"remove","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":31,"column":2},"end":{"row":34,"column":5},"action":"remove","lines":["def authenticated?(remember_token)","  \treturn false if remember_digest.nil?","    BCrypt::Password.new(remember_digest).is_password?(remember_token)","  end"]},{"start":{"row":31,"column":2},"end":{"row":35,"column":5},"action":"insert","lines":["def authenticated?(attribute, token)","    digest = send(\"#{attribute}_digest\")","    return false if digest.nil?","    BCrypt::Password.new(digest).is_password?(token)","  end"]}]}],[{"group":"doc","deltas":[{"start":{"row":50,"column":5},"end":{"row":51,"column":0},"action":"insert","lines":["",""]},{"start":{"row":51,"column":0},"end":{"row":51,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":51,"column":2},"end":{"row":52,"column":0},"action":"insert","lines":["",""]},{"start":{"row":52,"column":0},"end":{"row":52,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":52,"column":2},"end":{"row":55,"column":5},"action":"insert","lines":["def activate","    update_attribute(:activated,    true)","    update_attribute(:activated_at, Time.zone.now)","  end"]}]}],[{"group":"doc","deltas":[{"start":{"row":55,"column":5},"end":{"row":56,"column":0},"action":"insert","lines":["",""]},{"start":{"row":56,"column":0},"end":{"row":56,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":56,"column":2},"end":{"row":57,"column":0},"action":"insert","lines":["",""]},{"start":{"row":57,"column":0},"end":{"row":57,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":57,"column":2},"end":{"row":59,"column":5},"action":"insert","lines":["def send_activation_email","    UserMailer.account_activation(self).deliver_now","  end"]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":2},"end":{"row":1,"column":50},"action":"remove","lines":["attr_accessor :remember_token, :activation_token"]},{"start":{"row":1,"column":2},"end":{"row":1,"column":64},"action":"insert","lines":["attr_accessor :remember_token, :activation_token, :reset_token"]}]}],[{"group":"doc","deltas":[{"start":{"row":59,"column":5},"end":{"row":60,"column":0},"action":"insert","lines":["",""]},{"start":{"row":60,"column":0},"end":{"row":60,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":2},"end":{"row":61,"column":0},"action":"insert","lines":["",""]},{"start":{"row":61,"column":0},"end":{"row":61,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":61,"column":2},"end":{"row":65,"column":5},"action":"insert","lines":["  def create_reset_digest","    self.reset_token = User.new_token","    update_attribute(:reset_digest,  User.digest(reset_token))","    update_attribute(:reset_sent_at, Time.zone.now)","  end"]}]}],[{"group":"doc","deltas":[{"start":{"row":65,"column":5},"end":{"row":66,"column":0},"action":"insert","lines":["",""]},{"start":{"row":66,"column":0},"end":{"row":66,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":66,"column":2},"end":{"row":67,"column":0},"action":"insert","lines":["",""]},{"start":{"row":67,"column":0},"end":{"row":67,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":61,"column":2},"end":{"row":61,"column":4},"action":"remove","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":66,"column":2},"end":{"row":67,"column":0},"action":"insert","lines":["",""]},{"start":{"row":67,"column":0},"end":{"row":67,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":67,"column":2},"end":{"row":69,"column":5},"action":"insert","lines":["def send_password_reset_email","    UserMailer.password_reset(self).deliver_now","  end"]}]}],[{"group":"doc","deltas":[{"start":{"row":69,"column":5},"end":{"row":70,"column":0},"action":"insert","lines":["",""]},{"start":{"row":70,"column":0},"end":{"row":70,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":2},"end":{"row":71,"column":0},"action":"insert","lines":["",""]},{"start":{"row":71,"column":0},"end":{"row":71,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":71,"column":2},"end":{"row":82,"column":7},"action":"insert","lines":["private","","    # Converts email to all lower-case.","    def downcase_email","      self.email = email.downcase","    end","","    # Creates and assigns the activation token and digest.","    def create_activation_digest","      self.activation_token  = User.new_token","      self.activation_digest = User.digest(activation_token)","    end"]}]}],[{"group":"doc","deltas":[{"start":{"row":69,"column":5},"end":{"row":70,"column":0},"action":"insert","lines":["",""]},{"start":{"row":70,"column":0},"end":{"row":70,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":2},"end":{"row":71,"column":0},"action":"insert","lines":["",""]},{"start":{"row":71,"column":0},"end":{"row":71,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":71,"column":2},"end":{"row":73,"column":5},"action":"insert","lines":["def password_reset_expired?","    reset_sent_at < 2.hours.ago","  end"]}]}],[{"group":"doc","deltas":[{"start":{"row":73,"column":5},"end":{"row":73,"column":6},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":73,"column":6},"end":{"row":73,"column":7},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":73,"column":7},"end":{"row":73,"column":8},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":73,"column":7},"end":{"row":73,"column":8},"action":"remove","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":73,"column":6},"end":{"row":73,"column":7},"action":"remove","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":73,"column":5},"end":{"row":73,"column":6},"action":"remove","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":52,"column":2},"end":{"row":55,"column":5},"action":"remove","lines":["def activate","    update_attribute(:activated,    true)","    update_attribute(:activated_at, Time.zone.now)","  end"]},{"start":{"row":52,"column":2},"end":{"row":55,"column":5},"action":"insert","lines":["# Activates an account.","  def activate","    update_columns(activated: FILL_IN, activated_at: FILL_IN)","  end"]}]}],[{"group":"doc","deltas":[{"start":{"row":63,"column":4},"end":{"row":64,"column":51},"action":"remove","lines":["update_attribute(:reset_digest,  User.digest(reset_token))","    update_attribute(:reset_sent_at, Time.zone.now)"]},{"start":{"row":63,"column":4},"end":{"row":64,"column":42},"action":"insert","lines":["update_columns(reset_digest:  FILL_IN,","                   reset_sent_at: FILL_IN)"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":42},"end":{"row":64,"column":43},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":43},"end":{"row":64,"column":44},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":44},"end":{"row":64,"column":45},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":45},"end":{"row":64,"column":46},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":45},"end":{"row":64,"column":46},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":44},"end":{"row":64,"column":45},"action":"remove","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":43},"end":{"row":64,"column":44},"action":"remove","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":42},"end":{"row":64,"column":43},"action":"remove","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":0},"end":{"row":14,"column":0},"action":"insert","lines":["<<<<<<< HEAD","=======","  has_many :microposts, dependent: :destroy","  has_many :active_relationships, class_name:  \"Relationship\",","                                  foreign_key: \"follower_id\",","                                  dependent:   :destroy","   has_many :passive_relationships, class_name:  \"Relationship\",","                                   foreign_key: \"followed_id\",","                                   dependent:   :destroy","  has_many :following, through: :active_relationships,  source: :followed","  has_many :followers, through: :passive_relationships, source: :follower","  default_scope -> { order(created_at: :desc) }",">>>>>>> e95c9570e92cf4d671da9c79d194911d8f7b2b67",""]},{"start":{"row":23,"column":45},"end":{"row":23,"column":64},"action":"insert","lines":[", allow_blank: true"]},{"start":{"row":87,"column":0},"end":{"row":114,"column":0},"action":"insert","lines":["<<<<<<< HEAD","=======","","  # Defines a proto-feed.","  # See \"Following users\" for the full implementation.","  def feed","    following_ids = \"SELECT followed_id FROM relationships","                     WHERE  follower_id = :user_id\"","    Micropost.where(\"user_id IN (#{following_ids})","                     OR user_id = :user_id\", user_id: id)","  end","","  # Follows a user.","  def follow(other_user)","    active_relationships.create(followed_id: other_user.id)","  end","","  # Unfollows a user.","  def unfollow(other_user)","    active_relationships.find_by(followed_id: other_user.id).destroy","  end","","  # Returns true if the current user is following the other user.","  def following?(other_user)","    following.include?(other_user)","  end",">>>>>>> e95c9570e92cf4d671da9c79d194911d8f7b2b67",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":0},"end":{"row":2,"column":7},"action":"remove","lines":["<<<<<<< HEAD","======="]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":31},"end":{"row":1,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":11,"column":0},"end":{"row":11,"column":48},"action":"remove","lines":[">>>>>>> e95c9570e92cf4d671da9c79d194911d8f7b2b67"]}]}],[{"group":"doc","deltas":[{"start":{"row":10,"column":47},"end":{"row":11,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":5,"column":2},"end":{"row":5,"column":3},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":0},"end":{"row":85,"column":7},"action":"remove","lines":["<<<<<<< HEAD","======="]}]}],[{"group":"doc","deltas":[{"start":{"row":109,"column":0},"end":{"row":109,"column":48},"action":"remove","lines":[">>>>>>> e95c9570e92cf4d671da9c79d194911d8f7b2b67"]}]}],[{"group":"doc","deltas":[{"start":{"row":108,"column":5},"end":{"row":109,"column":0},"action":"remove","lines":["",""]}]}]]},"ace":{"folds":[],"scrolltop":1516,"scrollleft":0,"selection":{"start":{"row":108,"column":5},"end":{"row":108,"column":5},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":107,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1425696567000}